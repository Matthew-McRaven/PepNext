# Notice below generated by GitHub.
# I removed the cloning code, and added my own build steps.

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
name: CodeQL
run-name: CodeQl
on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
    # Run at 2100 UTC, or 1400 PST, on Fridays.
    # Help from: https://crontab.guru/#0_21_*_*_5
  schedule:
    - cron: '0 21 * * 5'
  workflow_dispatch:
jobs:
  analyze:
    name: Analyze
    if: (github.event_name != 'pull_request') || (github.event.pull_request.draft == false)

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/matthew-mcraven/pepp/dev:0.8.2
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp']
        include:
          - language: 'c-cpp'
            sarif-file: 'cpp'

    steps:
    # Install CodeQL and build dependencies
    - name: install CodeQL dependencies
      run: apt update && apt-get install -y --no-install-recommends sudo


    - name: Install CMake and Ninja
      uses: lukka/get-cmake@v3.27.7
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.6.0'
    - name: Checkout source code (shallow)
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    # CMake configure & build
    - name: Configure vcpkg and convert shallow clone to regular
      run: >
        cd $GITHUB_WORKSPACE/3rd-party/vcpkg
        && git fetch --unshallow
        && ./bootstrap-vcpkg.sh
        && ./vcpkg integrate install
      # Eventually, when we have a GUI target, we will want to disable all tests
    - name: Configure CMake
      run: >
        cmake -B $GITHUB_WORKSPACE/build -S $GITHUB_WORKSPACE
        -D CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/3rd-party/vcpkg/scripts/buildsystems/vcpkg.cmake
        -D SKIP_TERM_TESTS=true
        -G Ninja -DCMAKE_BUILD_TYPE=Debug

    - name: Run build
      run: cmake --build $GITHUB_WORKSPACE/build -j6

    # Don't upload, since we need to filter the results first.
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        upload: False
        category: "/language:${{matrix.language}}"
    - name: Remove 3rd-party deps from CodeQL results
      uses: advanced-security/filter-sarif@v1
      with:
        patterns: |
          -3rd-party/**
          bin/**
          logic/**
          ui/**
        input: ../results/${{matrix.sarif-file}}.sarif
        output: ../results/${{matrix.sarif-file}}.sarif
    - name: Upload CodeQL results
      uses: actions/upload-artifact@v2.2.0
      with:
        name: results
        path: ../results
        retention-days: 1
