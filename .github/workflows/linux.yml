name: Linux CI
run-name: Linux_CI
on: [push]
jobs:
  branch_info:
    name: Get working branch information
    runs-on: [ubuntu-latest]
    outputs:
      branch_name: ${{ steps.branch.outputs.branch }}
      not_default: ${{ steps.branch.outputs.not_default }}
    steps:
      - name: set branch info
        id: branch
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            export BRANCH="${GITHUB_REF##*/}"
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            export BRANCH="${$GITHUB_BASE_REF}"
          else
            echo "unknown event" && exit 1;
          fi
          if [ "$BRANCH" = "main" ]; then
            export NOT_DEFAULT="false"
          else
            export NOT_DEFAULT="true"
          fi
          echo "branch=${BRANCH}\nnot_default=${NOT_DEFAULT}" >> $GITHUB_OUTPUT
          echo "branch is ${BRANCH} and default is ${NOT_DEFAULT}"
  gcc_build_test:
    runs-on: ubuntu-latest
    needs: branch_info
    env:
      BRANCH_NAME: ${{ needs.branch_info.outputs.branch_name }}
      NOT_DEFAULT: ${{ needs.branch_info.outputs.not_default }}
    container:
      image: ghcr.io/matthew-mcraven/pepp/dev:0.8.2
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Replace ld with mold
        run: pth=$(which ld) && rm $pth && ln -s $(which mold) $pth
      - uses: hendrikmuhs/ccache-action@v1.2.10
        with:
          append-timestamp: false
          verbose: 2
          key: ${{ needs.branch_info.outputs.branch_name }}
          restore: ${{ needs.branch_info.outputs.not_default }}
          # action uses newline-separated values for keys
          restore-keys: |
            cache-main
      - name: Configure vcpkg
        run: $GITHUB_WORKSPACE/3rd-party/vcpkg/bootstrap-vcpkg.sh && $GITHUB_WORKSPACE/3rd-party/vcpkg/vcpkg integrate install
      - name: Configure CMake
        run: cmake -B $GITHUB_WORKSPACE/build -S $GITHUB_WORKSPACE \
                -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/3rd-party/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -GNinja -DCMAKE_BUILD_TYPE=Debug -DUSE_SYSTEM_BOOT="ON" \
                -DCMAKE_C_FLAGS="-g -O0" -DCMAKE_CXX_FLAGS="-g -O0"

      - name: Run build
        run: cmake --build $GITHUB_WORKSPACE/build -j6
      - name: Run tests
        run: cd $GITHUB_WORKSPACE/build && ctest -j6
        env:
          QT_QPA_PLATFORM: 'offscreen'
          CTEST_OUTPUT_ON_FAILURE: 'TRUE'
  clang_time_trace:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/matthew-mcraven/pepp/dev:0.8.2
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Replace ld with mold
        run: pth=$(which ld) && rm $pth && ln -s $(which mold) $pth
      - uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"
          directory: /llvm
      - name: Move LLVM into /
        run: cd /llvm && ls -lah && find -type d -exec mkdir -vp ""/{} \; -or -exec mv -nv {} ""/{} \;
      - name: Switch to clang compiler instead of GCC
        run: export CMAKE_C_COMPILER=$(which clang) && export CMAKE_CXX_COMPILER=$(which clang++)
      - name: Copy custom target triplet to vcpkg
        run: cp $GITHUB_WORKSPACE/config/cmake-triplets/* $GITHUB_WORKSPACE/3rd-party/vcpkg/triplets
      - name: Configure vcpkg
        run: $GITHUB_WORKSPACE/3rd-party/vcpkg/bootstrap-vcpkg.sh && $GITHUB_WORKSPACE/3rd-party/vcpkg/vcpkg integrate install
      - name: Configure CMake
        run: cmake -B $GITHUB_WORKSPACE/build -S $GITHUB_WORKSPACE \
                -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/3rd-party/vcpkg/scripts/buildsystems/vcpkg.cmake \
                -GNinja -DCMAKE_BUILD_TYPE=Debug -DUSE_SYSTEM_BOOT="ON" \
                -DCMAKE_C_FLAGS="-g -O0" -DCMAKE_CXX_FLAGS="-g -O0" -DVCPKG_TARGET_TRIPLET=x64-linux-clang \
      - name: Run build
        run: cmake --build $GITHUB_WORKSPACE/build -j6
      - name: Download Clang build analyzer
        run: git clone https://github.com/aras-p/ClangBuildAnalyzer && cd ClangBuildAnalyzer \
             && cmake -B . -S . && cmake --build . && chmod +x ./ClangBuildAnalyzer
      - run: ./ClangBuildAnalyzer --all $GITHUB_WORKSPACE/build $GITHUB_WORKSPACE/trace.json
      - uses: actions/upload-artifact@v3
        with:
          name: clang-time-trace
          path: $GITHUB_WORKSPACE/trace.json
          retention-days: 3


