name: Build
on:
  workflow_call:
    inputs:
      name: {required: True, type: string}
      cache_name: {type: string}
      runs-on: {required: True, type: string}
      image: {type: string, default: ''}
      cmake_generator: {type: string, default: ""}
      cmake_toolchain: {type: string, required: False}
      cmake_xargs: {type: string}
      ctest_launcher: {type: string, default: "ctest"}
      compiler_launcher: {type: string, default: ""}
      compiler_c: {type: string, default: ""}
      compiler_cpp: {type: string, default: ""}
      codeql: {type: boolean, default: False}
      variant: {type: string, default: "Debug"}
      not_default: {required: True, type: boolean}
      save_cache: {type: boolean, default: True}
      docs_artifact: {type: string}
      docs_audience: {type: string}

jobs:
  matrix_build:
    name: ${{ inputs.name }}
    runs-on: ${{ inputs.runs-on }}
    # Configure repo permissions for CodeQL job, so that it may upload the SARIF outputs
    timeout-minutes: ${{ github.event.inputs.codeql && 360 || 60 }}
    container:
      image: ${{ inputs.image }}
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    # Perform shallow clone, which may break some other operations
    # Must exectute before any repo-local actions
    - name: Checkout source code (shallow)
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    # Local github runner doesn't have node installed.
    - if: env.ACT
      name: Install Node if running locally using `nektos/act`
      uses: ./.github/actions/install-node

    # Install dependencies based on enabled features
    - name: Install Qt+CMake in non-containerized builds
      if: inputs.image  == ''
      uses: ./.github/actions/install-qt-cmake
      with:
        cache-key-prefix: install-qt-${{ inputs.runs-on }}

    - name: Install LLVM on Linux containerized builds
      if: inputs.runs-on=='ubuntu-latest' && inputs.compiler_c == 'clang'
      uses: ./.github/actions/install-llvm

    # Prevent clang from using ccache, because it is profiling build times
    - name: Enable caching object files between builds
      # Disable ccache when running locally
      if: inputs.compiler_launcher == 'ccache' && !env.ACT
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        verbose: 2
        key: ${{ inputs.cache_name || inputs.name }}
        restore: ${{ inputs.not_default }}
        save: ${{ inputs.save_cache }}

    # Initializes the CodeQL tools for scanning. Must occur before code is built.
    - name: Initialize CodeQL
      if: inputs.codeql && !env.ACT
      uses: github/codeql-action/init@v3
      with:
        languages: "c-cpp"

    # CMake configure & build
    - name: Download prebuilt help documentation
      uses: actions/download-artifact@v4
      if: inputs.docs_artifact
      with:
        name: ${{ inputs.docs_artifact }}
        path: ${{ inputs.docs_artifact }}
    - name: Configure CMake
      shell: bash
      run: >
          ${{ contains(inputs.name, 'EMSDK') && 'source /emsdk/emsdk_env.sh &&' || '' }}
          cmake
          -B build -S .
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_C_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_CXX_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_c && format('-D CMAKE_C_COMPILER={0}', inputs.compiler_c) || '' }}
          ${{ inputs.compiler_cpp && format('-D CMAKE_CXX_COMPILER={0}', inputs.compiler_cpp) || '' }}
          ${{ inputs.image && '-D USE_SYSTEM_BOOST=on' || '' }}
          ${{ inputs.cmake_toolchain && format('-D CMAKE_TOOLCHAIN_FILE={0}', inputs.cmake_toolchain) || ''}}
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.cmake_xargs }}
          ${{ inputs.docs_audience && format('-D DOC_AUDIENCE={0}', inputs.docs_audience) || '' }}
          ${{inputs.docs_artifact && format('-D DOC_PREBUILT_DIR="{0}"', inputs.docs_artifact) || '' }}
          -D CMAKE_BUILD_TYPE=Debug

    - name: Run build
      run: cmake --build build -j6

    # Run tests, sign outputs, and upload artifacts
    - name: Run tests
      if: inputs.ctest_launcher
      run: ${{ inputs.ctest_launcher }} --test-dir build -j6 -C Debug --output-on-failure
      env:
        # Must be offscreen, or tests that involve GUI libraries will fail
        QT_QPA_PLATFORM: 'offscreen'
        CTEST_OUTPUT_ON_FAILURE: 'TRUE'

    - name: Analyze buildtime for Linux-Clang
      if: inputs.runs-on == 'ubuntu-latest' && inputs.compiler_c == 'clang'
      uses: ./.github/actions/analyze-buildtime

    - name: Perform CodeQL analysis
      if: inputs.codeql && !env.ACT
      uses: ./.github/actions/run-codeql
