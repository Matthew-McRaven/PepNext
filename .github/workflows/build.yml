name: Build
on:
  workflow_call:
    inputs:
      name: { required: True, type: string }
      cache_name: { type: string }
      runs-on: { required: True, type: string }
      image: { type: string, default: '' }
      cmake_generator: { type: string, default: "" }
      cmake_toolchain: { type: string, required: False }
      cmake_xargs: { type: string }
      ctest_launcher: { type: string, default: "ctest" }
      compiler_launcher: { type: string, default: "" }
      compiler_c: { type: string, default: "" }
      compiler_cpp: { type: string, default: "" }
      codeql: { type: boolean, default: False }
      variant: { type: string, default: "Debug" }
      not_default: { required: True, type: boolean }
      save_cache: { type: boolean, default: True }
      docs_artifact: { type: string }
      images_artifact: { type: string }
      docs_audience: { type: string }
    secrets:
      MAC_BUILD_CERTIFICATE_BASE64:
        description: 'Contains an apple developer cert.'
        required: false
      MAC_KEYCHAIN_PASSWORD:
        description: 'Password for keychain in which developer cert will be stored..'
        required: false
      MAC_P12_PASSWORD:
        description: 'Password for build certificate.'
        required: false
      MAC_DEVELOPER_NAME:
        description: 'Developer name for build certificate.'
        required: false

jobs:
  matrix_build:
    name: ${{ inputs.name }}
    runs-on: ${{ inputs.runs-on }}
    # Configure repo permissions for CodeQL job, so that it may upload the SARIF outputs
    timeout-minutes: ${{ github.event.inputs.codeql && 360 || 60 }}
    container:
      image: ${{ inputs.image }}
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      # Perform shallow clone, which may break some other operations
      # Must exectute before any repo-local actions
      - name: Checkout source code (shallow)
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          # LFS defaults to disabled, but accidental LFS bandwidth would be bad.
          lfs: 'false'
      # Local github runner doesn't have node installed.
      - if: env.ACT
        name: Install Node if running locally using `nektos/act`
        uses: ./.github/actions/install-node
      # Must do a bunch of work to enable signing on MacOS.
      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # WARNING: If we switch to self-hosted runners, must clean up the certs ourselves.
      - name: Import Apple Certificate
        if: ${{ contains(inputs.name, 'MacOS') }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$MAC_BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security create-keychain -p "$MAC_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$MAC_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$MAC_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security show-keychain-info $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          security find-certificate -a -p -c $CERTIFICATE_PATH $KEYCHAIN_PATH
        env:
          MAC_BUILD_CERTIFICATE_BASE64: ${{ secrets.MAC_BUILD_CERTIFICATE_BASE64 }}
          MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
          MAC_P12_PASSWORD: ${{ secrets.MAC_P12_PASSWORD }}

      # Install dependencies based on enabled features
      - name: Install Qt+CMake in non-containerized builds
        if: inputs.image  == ''
        uses: ./.github/actions/install-qt-cmake
        with:
          cache-key-prefix: install-qt-${{ inputs.runs-on }}

      - name: Add QTIFW to path
        if: inputs.runs-on == 'windows-latest'
        shell: bash
        run: echo "$RUNNER_WORKSPACE/Qt/Tools/QtInstallerFramework/4.7/bin" >>$GITHUB_PATH

      # Prevent clang from using ccache, because it is profiling build times
      - name: Enable caching object files between builds
        # Disable ccache when running locally
        if: inputs.compiler_launcher == 'ccache' && !env.ACT
        uses: hendrikmuhs/ccache-action@v1.2.12
        with:
          verbose: 2
          key: ${{ inputs.cache_name || inputs.name }}
          restore: ${{ inputs.not_default }}
          save: ${{ inputs.save_cache }}

      # Initializes the CodeQL tools for scanning. Must occur before code is built.
      - name: Initialize CodeQL
        if: inputs.codeql && !env.ACT
        uses: github/codeql-action/init@v3
        with:
          languages: "c-cpp"

      # CMake configure & build
      - name: Download prebuilt help documentation
        uses: actions/download-artifact@v4
        if: inputs.docs_artifact
        with:
          name: ${{ inputs.docs_artifact }}
          path: ${{ inputs.docs_artifact }}

      - name: Download converted images and icons
        uses: actions/download-artifact@v4
        if: inputs.images_artifact
        with:
          name: ${{ inputs.images_artifact }}
          path: data

      - name: Configure CMake
        shell: bash
        run: >
          ${{ contains(inputs.name, 'EMSDK') && 'source /emsdk/emsdk_env.sh &&' || '' }}
          cmake
          -B build -S .
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_C_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_launcher && format('-D CMAKE_CXX_COMPILER_LAUNCHER={0}', inputs.compiler_launcher) || '' }}
          ${{ inputs.compiler_c && format('-D CMAKE_C_COMPILER={0}', inputs.compiler_c) || '' }}
          ${{ inputs.compiler_cpp && format('-D CMAKE_CXX_COMPILER={0}', inputs.compiler_cpp) || '' }}
          ${{ inputs.cmake_toolchain && format('-D CMAKE_TOOLCHAIN_FILE={0}', inputs.cmake_toolchain) || ''}}
          ${{ inputs.cmake_generator && format('-G {0}', inputs.cmake_generator) || '' }}
          ${{ inputs.cmake_xargs }}
          ${{ inputs.docs_audience && format('-D DOC_AUDIENCE={0}', inputs.docs_audience) || '' }}
          ${{inputs.docs_artifact && format('-D DOC_PREBUILT_DIR="{0}"', inputs.docs_artifact) || '' }}
          -D CMAKE_BUILD_TYPE=Debug -D MAC_DEVELOPER_NAME="$MAC_DEVELOPER_NAME"
          -D CPACK_BUILD_CONFIG=Debug -D CMAKE_INSTALL_PREFIX=./install
        env:
          MAC_DEVELOPER_NAME: ${{ secrets.MAC_DEVELOPER_NAME }}


      - name: Run build
        run: cmake --build build -j6

      - name: Gather WASM build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ contains(inputs.name, 'EMSDK') }}
        with:
           name: wasm-artifacts
           path: |
             output/pepp.html
             output/pepp.js
             output/pepp.wasm
             output/qtloader.js

      - name: Run cpack
        shell: bash
        if: ${{ !contains(inputs.name, 'EMSDK') }}
        working-directory: build
        run: ls -lah && cpack -c Debug

      # Run tests, sign outputs, and upload artifacts
      - name: Run tests
        if: inputs.ctest_launcher
        run: ${{ inputs.ctest_launcher }} --test-dir build -j6 -C Debug --output-on-failure
        env:
          # Must be offscreen, or tests that involve GUI libraries will fail
          QT_QPA_PLATFORM: 'offscreen'
          CTEST_OUTPUT_ON_FAILURE: 'TRUE'

      - name: Analyze buildtime for Linux-Clang
        if: inputs.runs-on == 'ubuntu-latest' && inputs.compiler_c == 'clang'
        uses: ./.github/actions/analyze-buildtime

      - name: Perform CodeQL analysis
        if: inputs.codeql && !env.ACT
        uses: ./.github/actions/run-codeql
