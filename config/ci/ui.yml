# You must provide the following stages
#stages:
#  - build
#  - test
#  - tag
#  - deploy

# Variables that must be injected into every pipeline
variables:
  BUILD_VERSION: v0.6.0
  GIT_LFS_SKIP_SMUDGE: '1'
  # Append dist, because I have generated files there
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp, dist

##################
#  Main Package  #
##################
build:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: registry.gitlab.com/pepnext/docker/develop:${BUILD_VERSION}
  stage: build
  needs: [ ]
  tags:
    - docker
  script:
    - npm ci
    - npm run typecheck
    - npm run build
    - npm run test:ci
  coverage: '/^\s*Coverage .*\d+.*/'
  rules:
    - if: '$CI_COMMIT_TAG =~ "/^$/"'
  artifacts:
    expire_in: 1 week
    when: always
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml


##################
#    Run SAST    #
##################
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

##################
#  Run Chromatic #
##################
test:chromatic:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: registry.gitlab.com/pepnext/docker/develop:${BUILD_VERSION}
  stage: test
  needs: [ build ]
  tags:
    - docker
  script:
    - npm ci
    - npm run build-storybook
    - npx chromatic --exit-zero-on-changes --project-token ${CHROMATIC_PROJECT_TOKEN} --junit-report junit.xml -d storybook-static
  rules:
    - if: $CI_COMMIT_TAG =~ "/^$/" && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'dev')
      when: on_success
      changes:
        paths:
          - src/**/*
          - package.json
          - package-lock.json
          - .storybook/**/*
  artifacts:
    expire_in: 1 week
    when: always
    reports:
      junit:
        - junit.xml

#######################
# Conditional Publish #
#######################
tag:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: registry.gitlab.com/pepnext/docker/develop:${BUILD_VERSION}
  stage: tag
  # Note, this job should never be run if build isn't. Make sure that this job will not trigger (via rules)
  # in all cases where build doesn't trigger.
  needs:
    - job: build
      optional: true
    - job: 'test:chromatic'
      optional: true
  tags:
    - docker
  script:
    - package_name=$(jq -r .name < package.json)
    - published_version=`npm view $package_name version || echo "0.0.0"`
    - current_version=$(jq -r .version < package.json)
    - TAG="v$(jq -r .version < package.json)"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    # See https://stackoverflow.com/questions/65234416/gitlab-ci-cd-cannot-git-push-from-gitlab-ci-yml
    - git remote set-url origin "https://gitlab-ci-token:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - npm i -g semver
    - export NODE_PATH=`npm config get prefix`/lib/node_modules/
    - ec=`node -p "const s=require('semver');console.log(Number(s.gt('$current_version', '$published_version')));process.exit(0);"`
    # If STD out was was 1, then tag and push. Otherwise, give up without crashing
    # Must use weird push syntax, see: https://stackoverflow.com/a/37198851.
    - ([ $ec -eq 1 ] && git tag "$TAG" && git push --force origin "$TAG":"$TAG") || true
  rules:
    - if: $CI_COMMIT_TAG =~ "/^$/" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


publish:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: registry.gitlab.com/pepnext/docker/develop:${BUILD_VERSION}
  stage: deploy
  needs: [ ]
  tags:
    - docker
  script:
    - npm ci
    - printf "\n//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - npm publish
  rules:
    - if: $CI_COMMIT_TAG


changelog:
  image: registry.gitlab.com/pepnext/docker/develop:${BUILD_VERSION}
  stage: build
  needs: [ ]
  tags:
    - docker
  script:
    - cd .gitlab
    - npm ci
    - npx conventional-changelog-cli -n conventional.config.cjs -k ../package.json -r 2 > ../changelog.md
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - changelog.md


release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [ changelog ]
  tags:
    - docker
  script:
    - echo  "Uploading changelog"
  rules:
    - if: $CI_COMMIT_TAG
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: './changelog.md'
    tag_name: '$CI_COMMIT_TAG'


